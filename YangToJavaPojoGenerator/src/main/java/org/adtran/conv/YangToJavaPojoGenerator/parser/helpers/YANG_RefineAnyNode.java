/* Generated By:JJTree: Do not edit this line. YANG_RefineAnyNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=YANG_,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.adtran.conv.YangToJavaPojoGenerator.parser.helpers;

import java.util.Enumeration;
import java.util.Vector;

//import sun.applet.GetWindowPluginCallRequest;

public class YANG_RefineAnyNode extends YANG_Refine {
	private String refineAnyNodeId;

	public String getRefineAnyNodeId() {
		return refineAnyNodeId;
	}

	public YANG_RefineAnyNode(int id) {
		super(id);
	}

	public YANG_RefineAnyNode(yang p, int id) {
		super(p, id);
	}

	public String getRefineNodeId() {
		return refineAnyNodeId;
	}

	public void setRefineAnyNodeId(String r) {
		refineAnyNodeId = unquote(r);
	}

	private YANG_Default ydefault = null;

	private boolean b_default = false;

	protected YANG_MinElement min = null;
	protected YANG_MaxElement max = null;
	private boolean b_min = false, b_max = false;

	private YANG_Mandatory mandatory = null;

	private boolean b_mandatory = false;

	private YANG_Presence presence = null;

	private boolean b_presence = false;

	public void setMandatory(YANG_Mandatory m) {
		if (!b_mandatory) {
			b_mandatory = true;
			mandatory = m;
		} else
			YangErrorManager.addError(filename, m.getLine(), m.getCol(),
					"unex_kw", "mandatory");
	}

	public YANG_Mandatory getMandatory() {
		return mandatory;
	}

	public void setMinElement(YANG_MinElement m) {
		if (b_min)
			YangErrorManager.addError(filename, m.getLine(), m.getCol(),
					"unex_kw", "min");
		else {
			b_min = true;
			min = m;
		}
	}

	public void setPresence(YANG_Presence p) {
		if (!b_presence) {
			b_presence = true;
			presence = p;
		} else
			YangErrorManager.addError(filename, p.getLine(), p.getCol(),
					"unex_kw", "presence");
	}

	public YANG_Presence getPresence() {
		return presence;
	}

	public YANG_MinElement getMinElement() {
		return min;
	}

	public void setMaxElement(YANG_MaxElement m) {
		if (b_max)
			YangErrorManager.addError(filename, m.getLine(), m.getCol(),
					"unex_kw", "max");
		else {
			b_max = true;
			max = m;
		}
	}

	public YANG_MaxElement getMaxElement() {
		return max;
	}

	public void setDefault(YANG_Default d) {
		if (!b_default) {
			b_default = true;
			ydefault = d;
		} else
			YangErrorManager.addError(filename, d.getLine(), d.getCol(),
					"unex_kw", "default");
	}

	public YANG_Default getDefault() {
		return ydefault;
	}

	private Vector<YANG_Must> musts = new Vector<YANG_Must>();

	public void addMust(YANG_Must m) {
		musts.add(m);
	}

	public Vector<YANG_Must> getMusts() {
		return musts;
	}

	protected YANG_Config config = null;

	protected boolean b_config = false;

	public void setConfig(YANG_Config c) {
		if (!b_config) {
			b_config = true;
			config = c;
		} else
			YangErrorManager.addError(filename, c.getLine(), c.getCol(),
					"unex_kw", "config");
	}

	public YANG_Config getConfig() {
		return config;
	}

	public YANG_RefineLeaf getRefineLeaf() {
		YANG_RefineLeaf rl = new YANG_RefineLeaf(0);
		rl.setCol(getCol());
		rl.setConfig(getConfig());
		rl.setDefault(getDefault());
		rl.setDescription(getDescription());
		rl.setFileName(getFileName());
		rl.setLine(getLine());
		rl.setMandatory(getMandatory());
		rl.setReference(getReference());
		rl.setRefineNodeId(getRefineNodeId());

		return rl;
	}

	public YANG_RefineContainer getRefineContainer() {
		YANG_RefineContainer rc = new YANG_RefineContainer(0);
		rc.setCol(getCol());
		rc.setConfig(getConfig());
		rc.setDescription(getDescription());
		rc.setFileName(getFileName());
		rc.setLine(getLine());
		rc.setReference(getReference());
		rc.setRefineNodeId(getRefineNodeId());

		return rc;
	}

	public YANG_RefineAnyXml getRefineAnyXml() {
		YANG_RefineAnyXml ra = new YANG_RefineAnyXml(0);
		ra.setCol(getCol());
		ra.setConfig(getConfig());
		ra.setDescription(getDescription());
		ra.setFileName(getFileName());
		ra.setLine(getLine());
		ra.setMandatory(getMandatory());
		ra.setReference(getReference());
		ra.setRefineNodeId(getRefineNodeId());

		return ra;
	}

	public YANG_RefineLeafList getRefineLeafList() {
		YANG_RefineLeafList rl = new YANG_RefineLeafList(0);
		rl.setCol(getCol());
		rl.setConfig(getConfig());
		rl.setDescription(getDescription());
		rl.setFileName(getFileName());
		rl.setLine(getLine());
		rl.setMaxElement(getMaxElement());
		rl.setMinElement(getMinElement());
		rl.setReference(getReference());
		rl.setRefineNodeId(getRefineNodeId());

		return rl;
	}

	public YANG_RefineList getRefineList() {
		YANG_RefineList rl = new YANG_RefineList(0);
		rl.setCol(getCol());
		rl.setConfig(getConfig());
		rl.setDescription(getDescription());
		rl.setFileName(getFileName());
		rl.setLine(getLine());
		rl.setMaxElement(getMaxElement());
		rl.setMinElement(getMinElement());
		rl.setReference(getReference());
		rl.setRefineNodeId(getRefineNodeId());

		return rl;
	}

	public YANG_RefineChoice getRefineChoice() {
		YANG_RefineChoice rc = new YANG_RefineChoice(0);
		rc.setCol(getCol());
		rc.setConfig(getConfig());
		rc.setDefault(getDefault());
		rc.setDescription(getDescription());
		rc.setFileName(getFileName());
		rc.setLine(getLine());
		rc.setMandatory(getMandatory());
		rc.setReference(getReference());
		rc.setRefineNodeId(getRefineNodeId());

		return rc;
	}

	public YANG_RefineCase getRefineCase() {
		YANG_RefineCase rc = new YANG_RefineCase(0);
		rc.setCol(getCol());
		rc.setDescription(getDescription());
		rc.setFileName(getFileName());
		rc.setLine(getLine());
		rc.setReference(getReference());
		rc.setRefineNodeId(getRefineNodeId());

		return rc;
	}

	public boolean isBracked() {
		return super.isBracked() || getMusts().size() != 0
				|| getMinElement() != null || getMaxElement() != null
				|| getDefault() != null || getConfig() != null
				|| getMandatory() != null || getPresence() != null;
	}

	public String toString() {
		String result = new String();
		result += "refine " + getRefineAnyNodeId();
		if (isBracked()) {
			result += " {\n";
			result += super.toString() + "\n";
			for (Enumeration<YANG_Must> em = getMusts().elements(); em
					.hasMoreElements();)
				result += em.nextElement() + "\n";
			if (getConfig() != null)
				result += getConfig() + "\n";
			if (getMinElement() != null)
				result += getMinElement() + "\n";
			if (getMaxElement() != null)
				result += getMaxElement() + "\n";
			if (getDefault() != null)
				result += getDefault() + "\n";
			if (getMandatory() != null)
				result += getMandatory() + "\n";
			if (getDescription() != null)
				result += getDescription() + "\n";
			if (getReference() != null)
				result += getReference() + "\n";
		} else
			result += ";";

		return result;
	}

}
/*
 * JavaCC - OriginalChecksum=86d01eb3768d2cd8ba8ae6c654d7e98b (do not edit this
 * line)
 */
