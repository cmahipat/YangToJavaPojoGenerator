/* Generated By:JJTree: Do not edit this line. YANG_Identity.java */

package org.adtran.conv.YangToJavaPojoGenerator.parser.helpers;

import java.text.MessageFormat;

public class YANG_Identity extends StatuedBody {

	private String identity = null;

	private YANG_Base base = null;

	public String getIdentity() {
		return identity;
	}

	public YANG_Base getBase() {
		return base;
	}

	private boolean b_base = false;

	public YANG_Identity(int id) {
		super(id);
	}

	public YANG_Identity(yang p, int id) {
		super(p, id);
	}

	public void setIdentity(String i) {
		identity = unquote(i);
	}

	public void setBase(YANG_Base b) {
		if (!b_base) {
			base = b;
			b_base = true;
		} else
			YangErrorManager.addError(filename, b.getLine(), b.getCol(), "unex_kw",
					"base");
	}

	public boolean isBracked() {
		return b_base || super.isBracked();
	}

	@Override
	public void check(YangContext context){

		if (getBase() != null) {
			YANG_Base base = getBase();
			YANG_Body b = context.getIdentity(base);
			if (b == null)
				YangErrorManager.addError(base.getFileName(), base.getLine(), base
						.getCol(), "base_not_found", base.getBase());
			else
				checkRecursion(context, this, base);

		}

	}

	private void checkRecursion(YangContext context, YANG_Identity id,
			YANG_Base yb) {
		YANG_Body b = context.getIdentity(yb);
		if (b != null)
			if (b instanceof YANG_Identity) {
				YANG_Identity bid = (YANG_Identity) b;
				if (bid.getIdentity().compareTo(id.getIdentity()) == 0)
					YangErrorManager.addError(getFileName(), getLine(), getCol(),
							"circ_identity", getBody());
				else {
					if (bid.getBase() != null)
						checkRecursion(context, id, bid.getBase());
				}
			}

	}

	@Override
	public String getBody() {
		return identity;
	}

	public String toString() {
		String result = "";
		result += "identity " + identity;
		if (isBracked()) {
			result += "\n{";
			result += super.toString() + "\n";
			result += "}";
		} else
			result += ";";
		return result;
	}

}
