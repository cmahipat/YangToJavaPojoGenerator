/* Generated By:JJTree&JavaCC: Do not edit this line. yangTokenManager.java */
package org.adtran.yang.parser.helpers;
import java.util.Enumeration;
import java.util.Vector;
import java.io.*;

/** Token Manager. */
public class yangTokenManager implements yangConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0x3ffffffL) != 0L)
         {
            jjmatchedKind = 91;
            return 101;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0x3ffffffL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
            return 101;
         }
         return -1;
      case 2:
         if ((active0 & 0xdffff9f7ffffdf00L) != 0L || (active1 & 0x3ee3dffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return 101;
         }
         if ((active0 & 0x2000060800002000L) != 0L || (active1 & 0x11c200L) != 0L)
            return 101;
         return -1;
      case 3:
         if ((active0 & 0x410b000204800L) != 0L || (active1 & 0x2820053L) != 0L)
            return 101;
         if ((active0 & 0xdffbef47ffdf9700L) != 0L || (active1 & 0x16c3dacL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return 101;
         }
         return -1;
      case 4:
         if ((active0 & 0xdf7bef63ffdf9700L) != 0L || (active1 & 0x16c1d86L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 4;
            return 101;
         }
         if ((active0 & 0x80000400000000L) != 0L || (active1 & 0x2028L) != 0L)
            return 101;
         return -1;
      case 5:
         if ((active0 & 0x9d59e722ffde1600L) != 0L || (active1 & 0x12c0d82L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
            return 101;
         }
         if ((active0 & 0x4222084100018100L) != 0L || (active1 & 0x401004L) != 0L)
            return 101;
         return -1;
      case 6:
         if ((active0 & 0x9d51e720f3d41200L) != 0L || (active1 & 0x10c0980L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
            return 101;
         }
         if ((active0 & 0x800020c0a0400L) != 0L || (active1 & 0x200402L) != 0L)
            return 101;
         return -1;
      case 7:
         if ((active0 & 0x8501e72093d41000L) != 0L || (active1 & 0x1040980L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 7;
            }
            return 101;
         }
         if ((active0 & 0x1850000060000200L) != 0L || (active1 & 0x80000L) != 0L)
            return 101;
         return -1;
      case 8:
         if ((active0 & 0x8100212003040000L) != 0L || (active1 & 0x1000000L) != 0L)
            return 101;
         if ((active0 & 0x1401c60090d01000L) != 0L || (active1 & 0x40980L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
            return 101;
         }
         return -1;
      case 9:
         if ((active0 & 0x1401460010d00000L) != 0L || (active1 & 0x40180L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 9;
            return 101;
         }
         if ((active0 & 0x800080001000L) != 0L || (active1 & 0x800L) != 0L)
            return 101;
         return -1;
      case 10:
         if ((active0 & 0x1401460010c00000L) != 0L || (active1 & 0x40080L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
            return 101;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x100L) != 0L)
            return 101;
         return -1;
      case 11:
         if ((active0 & 0x1400000010c00000L) != 0L || (active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 11;
            return 101;
         }
         if ((active0 & 0x1460000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 101;
         return -1;
      case 12:
         if ((active0 & 0x400000010000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 12;
            return 101;
         }
         if ((active0 & 0x1000000000c00000L) != 0L || (active1 & 0x40000L) != 0L)
            return 101;
         return -1;
      case 13:
         if ((active0 & 0x400000010000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 13;
            return 101;
         }
         return -1;
      case 14:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 14;
            return 101;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 101;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 59:
         return jjStopAtPos(0, 7);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x700L, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7c000L, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6180000L, 0x1800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1e00000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x18000000L, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7c0000000L, 0x0L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xf000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1f0000000000L, 0xc000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x80000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x7c000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3f80000000000000L, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800003L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300001cL);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 123:
         return jjStopAtPos(0, 5);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8c230000004800L, active1, 0x1a0a0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f0000780e181000L, active1, 0x201800L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000002000L, active1, 0x4100L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x600200100L, active1, 0x100000cL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10480000070000L, active1, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x61800030c00200L, active1, 0x800000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000010L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002100000000400L, active1, 0x400L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400003L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 70:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 84, 101);
         break;
      case 78:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000003018000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x1000000L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000040000000L, active1, 0x2000050L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000080000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000600L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xcL);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x3020L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80054000070000L, active1, 0x180L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20008000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000L, active1, 0x200803L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L, active1, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10108000104800L, active1, 0x480000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0xe400001000000L, active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x800000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000006000000L, active1, 0L);
      case 120:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 101);
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000000L, active1, 0x40100L);
      case 70:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 101);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000080000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 101);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 101);
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x100a00001000000L, active1, 0x1002L);
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20002080010000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80004000000000L, active1, 0x80L);
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1a10400006008000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x200000L);
      case 109:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000400L, active1, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x100c01000L, active1, 0x1080000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 101);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0x4008000008060000L, active1, 0x400008L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080420000200L, active1, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10006060000L, active1, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 101);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 101);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x48060080000400L, active1, 0x400d00L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x420000000010000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x300L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x201000001001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800100d00000L, active1, 0L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800200000000000L, active1, 0x40000L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 101);
         return jjMoveStringLiteralDfa5_0(active0, 0x10004050000000L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4002000208080000L, active1, 0x1000004L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0x200800L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000200000000L, active1, 0L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 101);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 101);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 101);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 101);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x100800000000200L, active1, 0x80002L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1811400070140000L, active1, 0L);
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x62000080000L, active1, 0x100L);
      case 109:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 101);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000400L, active1, 0x1000400L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x408000008000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 101);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 101);
         return jjMoveStringLiteralDfa6_0(active0, 0x10006000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 120:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000400000L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x40400000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 101);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 101);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 101);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0x400060000000000L, active1, 0x180L);
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2003000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000020040200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1810010010000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 101);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 101);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 101);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 101);
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x400800000001000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100200000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 101);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0x840000L, active1, 0x1000000L);
      case 103:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 101);
         break;
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000L, active1, 0x100L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 101);
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000010000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x40000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 101);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000010000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 88, 101);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 45, 101);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 101);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 101);
         return jjMoveStringLiteralDfa9_0(active0, 0x60000000000L, active1, 0x900L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000100000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 101);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 101);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 101);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0x80L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 101);
         return jjMoveStringLiteralDfa9_0(active0, 0x1400000001000L, active1, 0L);
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 75, 101);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000010000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1400000000000L, active1, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400060000000000L, active1, 0x100L);
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 101);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 101);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1400000000000L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(10, 72, 101);
         return jjMoveStringLiteralDfa11_0(active0, 0x60000400000L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x10800000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 46, 101);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 48, 101);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 71, 101);
         break;
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 41, 101);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 42, 101);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x1400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 82, 101);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(12, 23, 101);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 60, 101);
         break;
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 28, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 58, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xf7fffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 101:
                  if ((0xf7fffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(100);
                  }
                  if ((0xf7fffffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  if (curChar == 58)
                     jjCheckNAdd(99);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 4:
               case 12:
                  if (curChar != 34)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(8, 10);
                  break;
               case 5:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 6:
                  if (curChar == 43)
                     jjCheckNAddStates(11, 14);
                  break;
               case 7:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 8:
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 9:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 13:
                  if (curChar == 47)
                     jjAddStates(18, 19);
                  break;
               case 14:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if (curChar == 42)
                     jjAddStates(20, 21);
                  break;
               case 17:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 19:
                  if (curChar == 47)
                     jjCheckNAddStates(8, 10);
                  break;
               case 20:
                  if (curChar == 47)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 23:
                  if (curChar == 10)
                     jjCheckNAddStates(8, 10);
                  break;
               case 24:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
               case 27:
                  if (curChar == 39)
                     jjCheckNAddStates(25, 27);
                  break;
               case 26:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 29:
                  if (curChar != 39)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(8, 10);
                  break;
               case 30:
                  if (curChar == 47)
                     jjAddStates(28, 29);
                  break;
               case 31:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 42)
                     jjAddStates(30, 31);
                  break;
               case 34:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               case 35:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               case 36:
                  if (curChar == 47)
                     jjCheckNAddStates(11, 14);
                  break;
               case 37:
                  if (curChar == 47)
                     jjCheckNAddStates(32, 34);
                  break;
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 39:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 40:
                  if (curChar == 10)
                     jjCheckNAddStates(11, 14);
                  break;
               case 41:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
               case 69:
                  if (curChar != 39)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(35, 37);
                  break;
               case 45:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 46:
                  if (curChar == 43)
                     jjCheckNAddStates(38, 41);
                  break;
               case 47:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 48:
               case 50:
                  if (curChar == 34)
                     jjCheckNAddStates(42, 44);
                  break;
               case 49:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 52:
                  if (curChar != 34)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(35, 37);
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(45, 46);
                  break;
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 42)
                     jjAddStates(47, 48);
                  break;
               case 57:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 59:
                  if (curChar == 47)
                     jjCheckNAddStates(35, 37);
                  break;
               case 60:
                  if (curChar == 47)
                     jjCheckNAddStates(49, 51);
                  break;
               case 61:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 62:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 63:
                  if (curChar == 10)
                     jjCheckNAddStates(35, 37);
                  break;
               case 64:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
               case 67:
                  if (curChar == 39)
                     jjCheckNAddStates(52, 54);
                  break;
               case 66:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 70:
                  if (curChar == 47)
                     jjAddStates(55, 56);
                  break;
               case 71:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 72:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar == 42)
                     jjAddStates(57, 58);
                  break;
               case 74:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 73);
                  break;
               case 75:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 73);
                  break;
               case 76:
                  if (curChar == 47)
                     jjCheckNAddStates(38, 41);
                  break;
               case 77:
                  if (curChar == 47)
                     jjCheckNAddStates(59, 61);
                  break;
               case 78:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 79:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 80:
                  if (curChar == 10)
                     jjCheckNAddStates(38, 41);
                  break;
               case 81:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x100000200L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 83:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 84:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 85:
                  if (curChar == 47)
                     jjCheckNAddStates(62, 64);
                  break;
               case 86:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 87:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 88:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 89:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 91:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar == 42)
                     jjAddStates(65, 66);
                  break;
               case 93:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               case 94:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               case 95:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 96:
                  if ((0xf7fffffeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 97:
                  if ((0xf7fffffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 98:
                  if (curChar == 58)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0xf7fffffeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if ((0xf7fffffeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 101:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(100);
                  }
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 1:
                  jjAddStates(5, 7);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 9:
                  jjAddStates(15, 17);
                  break;
               case 11:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
               case 18:
                  jjCheckNAddTwoStates(18, 16);
                  break;
               case 21:
                  jjAddStates(22, 24);
                  break;
               case 26:
                  jjAddStates(25, 27);
                  break;
               case 28:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 32:
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
               case 35:
                  jjCheckNAddTwoStates(35, 33);
                  break;
               case 38:
                  jjAddStates(32, 34);
                  break;
               case 43:
                  jjAddStates(67, 68);
                  break;
               case 49:
                  jjAddStates(42, 44);
                  break;
               case 51:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 55:
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  jjCheckNAddTwoStates(58, 56);
                  break;
               case 61:
                  jjAddStates(49, 51);
                  break;
               case 66:
                  jjAddStates(52, 54);
                  break;
               case 68:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 72:
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
               case 75:
                  jjCheckNAddTwoStates(75, 73);
                  break;
               case 78:
                  jjAddStates(59, 61);
                  break;
               case 86:
                  jjAddStates(62, 64);
                  break;
               case 91:
                  jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
               case 94:
                  jjCheckNAddTwoStates(94, 92);
                  break;
               case 97:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 100:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 101:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(100);
                  }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 17);
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(18, 16);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 27);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(32, 34);
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(42, 44);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 56);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(49, 51);
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 54);
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(75, 73);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(59, 61);
                  break;
               case 86:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(62, 64);
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
               case 94:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(94, 92);
                  break;
               case 97:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 100:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(100);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   97, 98, 100, 85, 90, 1, 3, 4, 5, 6, 13, 7, 8, 25, 30, 9, 
   11, 12, 14, 20, 17, 19, 21, 22, 24, 26, 28, 29, 31, 37, 34, 36, 
   38, 39, 41, 45, 46, 53, 47, 48, 65, 70, 49, 51, 52, 54, 60, 57, 
   59, 61, 62, 64, 66, 68, 69, 71, 77, 74, 76, 78, 79, 81, 86, 87, 
   89, 93, 95, 43, 44, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\173", "\175", "\73", "\141\156\171\170\155\154", 
"\141\162\147\165\155\145\156\164", "\141\165\147\155\145\156\164", "\142\141\163\145", 
"\142\145\154\157\156\147\163\55\164\157", "\142\151\164", "\143\141\163\145", "\143\150\157\151\143\145", 
"\143\157\156\146\151\147", "\143\157\156\164\141\143\164", "\143\157\156\164\141\151\156\145\162", 
"\144\145\146\141\165\154\164", "\144\145\163\143\162\151\160\164\151\157\156", "\145\156\165\155", 
"\145\162\162\157\162\55\141\160\160\55\164\141\147", "\145\162\162\157\162\55\155\145\163\163\141\147\145", 
"\145\170\164\145\156\163\151\157\156", "\144\145\166\151\141\164\151\157\156", "\144\145\166\151\141\164\145", 
"\146\145\141\164\165\162\145", "\146\162\141\143\164\151\157\156\55\144\151\147\151\164\163", 
"\147\162\157\165\160\151\156\147", "\151\144\145\156\164\151\164\171", "\151\146\55\146\145\141\164\165\162\145", 
"\151\155\160\157\162\164", "\151\156\143\154\165\144\145", "\151\156\160\165\164", "\153\145\171", 
"\154\145\141\146", "\154\145\141\146\55\154\151\163\164", "\154\145\156\147\164\150", 
"\154\151\163\164", "\155\141\156\144\141\164\157\162\171", 
"\155\141\170\55\145\154\145\155\145\156\164\163", "\155\151\156\55\145\154\145\155\145\156\164\163", "\155\157\144\165\154\145", 
"\155\165\163\164", "\156\141\155\145\163\160\141\143\145", 
"\156\157\164\151\146\151\143\141\164\151\157\156", "\157\162\144\145\162\145\144\55\142\171", 
"\157\162\147\141\156\151\172\141\164\151\157\156", "\157\165\164\160\165\164", "\160\141\164\150", 
"\160\141\164\164\145\162\156", "\160\157\163\151\164\151\157\156", "\160\162\145\146\151\170", 
"\160\162\145\163\145\156\143\145", "\162\141\156\147\145", "\162\145\146\145\162\145\156\143\145", 
"\162\145\146\151\156\145", "\162\145\161\165\151\162\145\55\151\156\163\164\141\156\143\145", 
"\162\145\166\151\163\151\157\156", "\162\145\166\151\163\151\157\156\55\144\141\164\145", "\162\160\143", 
"\163\164\141\164\165\163", "\163\165\142\155\157\144\165\154\145", "\164\171\160\145", 
"\164\171\160\145\144\145\146", "\165\156\151\161\165\145", "\165\156\151\164\163", "\165\163\145\163", 
"\166\141\154\165\145", "\167\150\145\156", "\171\141\156\147\55\166\145\162\163\151\157\156", 
"\171\151\156\55\145\154\145\155\145\156\164", "\141\144\144", "\143\165\162\162\145\156\164", 
"\144\145\160\162\145\143\141\164\145\144", "\144\145\154\145\164\145", "\146\141\154\163\145", "\155\151\156", 
"\155\141\170", "\116\141\116", "\55\111\116\106", 
"\156\157\164\55\163\165\160\160\157\162\164\145\144", "\157\142\163\157\154\145\164\145", "\111\116\106", 
"\162\145\160\154\141\143\145", "\163\171\163\164\145\155", "\164\162\165\145", 
"\165\156\142\157\165\156\144\145\144", "\165\163\145\162", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[101];
static private final int[] jjstateSet = new int[202];
static protected char curChar;
/** Constructor. */
public yangTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public yangTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
