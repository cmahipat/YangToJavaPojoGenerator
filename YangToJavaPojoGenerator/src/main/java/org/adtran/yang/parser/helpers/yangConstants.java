/* Generated By:JJTree&JavaCC: Do not edit this line. yangConstants.java */
package org.adtran.yang.parser.helpers;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface yangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CMT = 1;
  /** RegularExpression Id. */
  int STRING = 2;
  /** RegularExpression Id. */
  int WSP = 3;
  /** RegularExpression Id. */
  int CRLF = 4;
  /** RegularExpression Id. */
  int LB = 5;
  /** RegularExpression Id. */
  int RB = 6;
  /** RegularExpression Id. */
  int SC = 7;
  /** RegularExpression Id. */
  int anyxmlkeyword = 8;
  /** RegularExpression Id. */
  int argumentkeyword = 9;
  /** RegularExpression Id. */
  int augmentkeyword = 10;
  /** RegularExpression Id. */
  int basekeyword = 11;
  /** RegularExpression Id. */
  int belongstokeyword = 12;
  /** RegularExpression Id. */
  int bitkeyword = 13;
  /** RegularExpression Id. */
  int casekeyword = 14;
  /** RegularExpression Id. */
  int choicekeyword = 15;
  /** RegularExpression Id. */
  int configkeyword = 16;
  /** RegularExpression Id. */
  int contactkeyword = 17;
  /** RegularExpression Id. */
  int containerkeyword = 18;
  /** RegularExpression Id. */
  int defaultkeyword = 19;
  /** RegularExpression Id. */
  int descriptionkeyword = 20;
  /** RegularExpression Id. */
  int enumkeyword = 21;
  /** RegularExpression Id. */
  int errorapptagkeyword = 22;
  /** RegularExpression Id. */
  int errormessagekeyword = 23;
  /** RegularExpression Id. */
  int extensionkeyword = 24;
  /** RegularExpression Id. */
  int deviationkeyword = 25;
  /** RegularExpression Id. */
  int deviatekeyword = 26;
  /** RegularExpression Id. */
  int featurekeyword = 27;
  /** RegularExpression Id. */
  int fractiondigitskeyword = 28;
  /** RegularExpression Id. */
  int groupingkeyword = 29;
  /** RegularExpression Id. */
  int identitykeyword = 30;
  /** RegularExpression Id. */
  int iffeaturekeyword = 31;
  /** RegularExpression Id. */
  int importkeyword = 32;
  /** RegularExpression Id. */
  int includekeyword = 33;
  /** RegularExpression Id. */
  int inputkeyword = 34;
  /** RegularExpression Id. */
  int keykeyword = 35;
  /** RegularExpression Id. */
  int leafkeyword = 36;
  /** RegularExpression Id. */
  int leaflistkeyword = 37;
  /** RegularExpression Id. */
  int lengthkeyword = 38;
  /** RegularExpression Id. */
  int listkeyword = 39;
  /** RegularExpression Id. */
  int mandatorykeyword = 40;
  /** RegularExpression Id. */
  int maxelementskeyword = 41;
  /** RegularExpression Id. */
  int minelementskeyword = 42;
  /** RegularExpression Id. */
  int modulekeyword = 43;
  /** RegularExpression Id. */
  int mustkeyword = 44;
  /** RegularExpression Id. */
  int namespacekeyword = 45;
  /** RegularExpression Id. */
  int notificationkeyword = 46;
  /** RegularExpression Id. */
  int orderedbykeyword = 47;
  /** RegularExpression Id. */
  int organizationkeyword = 48;
  /** RegularExpression Id. */
  int outputkeyword = 49;
  /** RegularExpression Id. */
  int pathkeyword = 50;
  /** RegularExpression Id. */
  int patternkeyword = 51;
  /** RegularExpression Id. */
  int positionkeyword = 52;
  /** RegularExpression Id. */
  int prefixkeyword = 53;
  /** RegularExpression Id. */
  int presencekeyword = 54;
  /** RegularExpression Id. */
  int rangekeyword = 55;
  /** RegularExpression Id. */
  int referencekeyword = 56;
  /** RegularExpression Id. */
  int refinekeyword = 57;
  /** RegularExpression Id. */
  int requireinstancekeyword = 58;
  /** RegularExpression Id. */
  int revisionkeyword = 59;
  /** RegularExpression Id. */
  int revisiondatekeyword = 60;
  /** RegularExpression Id. */
  int rpckeyword = 61;
  /** RegularExpression Id. */
  int statuskeyword = 62;
  /** RegularExpression Id. */
  int submodulekeyword = 63;
  /** RegularExpression Id. */
  int typekeyword = 64;
  /** RegularExpression Id. */
  int typedefkeyword = 65;
  /** RegularExpression Id. */
  int uniquekeyword = 66;
  /** RegularExpression Id. */
  int unitskeyword = 67;
  /** RegularExpression Id. */
  int useskeyword = 68;
  /** RegularExpression Id. */
  int valuekeyword = 69;
  /** RegularExpression Id. */
  int whenkeyword = 70;
  /** RegularExpression Id. */
  int yangversionkeyword = 71;
  /** RegularExpression Id. */
  int yinelementkeyword = 72;
  /** RegularExpression Id. */
  int addkeyword = 73;
  /** RegularExpression Id. */
  int currentkeyword = 74;
  /** RegularExpression Id. */
  int deprecatedkeyword = 75;
  /** RegularExpression Id. */
  int deletekeyword = 76;
  /** RegularExpression Id. */
  int falsekeyword = 77;
  /** RegularExpression Id. */
  int minkeyword = 78;
  /** RegularExpression Id. */
  int maxkeyword = 79;
  /** RegularExpression Id. */
  int nankeyword = 80;
  /** RegularExpression Id. */
  int neginfkeyword = 81;
  /** RegularExpression Id. */
  int notsupportedkeyword = 82;
  /** RegularExpression Id. */
  int obsoletekeyword = 83;
  /** RegularExpression Id. */
  int posinfkeyword = 84;
  /** RegularExpression Id. */
  int replacekeyword = 85;
  /** RegularExpression Id. */
  int systemkeyword = 86;
  /** RegularExpression Id. */
  int truekeyword = 87;
  /** RegularExpression Id. */
  int unboundedkeyword = 88;
  /** RegularExpression Id. */
  int userkeyword = 89;
  /** RegularExpression Id. */
  int P = 90;
  /** RegularExpression Id. */
  int S = 91;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<CMT>",
    "<STRING>",
    "<WSP>",
    "<CRLF>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"anyxml\"",
    "\"argument\"",
    "\"augment\"",
    "\"base\"",
    "\"belongs-to\"",
    "\"bit\"",
    "\"case\"",
    "\"choice\"",
    "\"config\"",
    "\"contact\"",
    "\"container\"",
    "\"default\"",
    "\"description\"",
    "\"enum\"",
    "\"error-app-tag\"",
    "\"error-message\"",
    "\"extension\"",
    "\"deviation\"",
    "\"deviate\"",
    "\"feature\"",
    "\"fraction-digits\"",
    "\"grouping\"",
    "\"identity\"",
    "\"if-feature\"",
    "\"import\"",
    "\"include\"",
    "\"input\"",
    "\"key\"",
    "\"leaf\"",
    "\"leaf-list\"",
    "\"length\"",
    "\"list\"",
    "\"mandatory\"",
    "\"max-elements\"",
    "\"min-elements\"",
    "\"module\"",
    "\"must\"",
    "\"namespace\"",
    "\"notification\"",
    "\"ordered-by\"",
    "\"organization\"",
    "\"output\"",
    "\"path\"",
    "\"pattern\"",
    "\"position\"",
    "\"prefix\"",
    "\"presence\"",
    "\"range\"",
    "\"reference\"",
    "\"refine\"",
    "\"require-instance\"",
    "\"revision\"",
    "\"revision-date\"",
    "\"rpc\"",
    "\"status\"",
    "\"submodule\"",
    "\"type\"",
    "\"typedef\"",
    "\"unique\"",
    "\"units\"",
    "\"uses\"",
    "\"value\"",
    "\"when\"",
    "\"yang-version\"",
    "\"yin-element\"",
    "\"add\"",
    "\"current\"",
    "\"deprecated\"",
    "\"delete\"",
    "\"false\"",
    "\"min\"",
    "\"max\"",
    "\"NaN\"",
    "\"-INF\"",
    "\"not-supported\"",
    "\"obsolete\"",
    "\"INF\"",
    "\"replace\"",
    "\"system\"",
    "\"true\"",
    "\"unbounded\"",
    "\"user\"",
    "<P>",
    "<S>",
  };

}
